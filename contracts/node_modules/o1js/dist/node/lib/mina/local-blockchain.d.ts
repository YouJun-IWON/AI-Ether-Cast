import { Field } from 'o1js/dist/node/lib/core';
import { UInt32, UInt64 } from 'o1js/dist/node/lib/int';
import { PrivateKey, PublicKey } from 'o1js/dist/node/lib/signature';
import { Account } from 'o1js/dist/node/lib/mina/account';
import { NetworkId } from 'o1js/dist/node/mina-signer/src/types';
import { Transaction, PendingTransaction } from 'o1js/dist/node/lib/mina/transaction';
import { type DeprecatedFeePayerSpec, type ActionStates } from 'o1js/dist/node/lib/mina/mina-instance';
export { LocalBlockchain };
/**
 * A mock Mina blockchain running locally and useful for testing.
 */
declare function LocalBlockchain({ proofsEnabled, enforceTransactionLimits, networkId, }?: {
    proofsEnabled?: boolean | undefined;
    enforceTransactionLimits?: boolean | undefined;
    networkId?: NetworkId | undefined;
}): {
    getNetworkId: () => NetworkId;
    proofsEnabled: boolean;
    /**
     * @deprecated use {@link Mina.getNetworkConstants}
     */
    accountCreationFee: () => UInt64;
    getNetworkConstants(): {
        genesisTimestamp: UInt64;
        slotTime: UInt64;
        accountCreationFee: UInt64;
    };
    currentSlot(): UInt32;
    hasAccount(publicKey: PublicKey, tokenId?: Field): boolean;
    getAccount(publicKey: PublicKey, tokenId?: Field): Account;
    getNetworkState(): {
        snarkedLedgerHash: import("o1js/dist/node/lib/field").Field;
        blockchainLength: UInt32;
        minWindowDensity: UInt32;
        totalCurrency: UInt64;
        globalSlotSinceGenesis: UInt32;
        stakingEpochData: {
            ledger: {
                hash: import("o1js/dist/node/lib/field").Field;
                totalCurrency: UInt64;
            };
            seed: import("o1js/dist/node/lib/field").Field;
            startCheckpoint: import("o1js/dist/node/lib/field").Field;
            lockCheckpoint: import("o1js/dist/node/lib/field").Field;
            epochLength: UInt32;
        };
        nextEpochData: {
            ledger: {
                hash: import("o1js/dist/node/lib/field").Field;
                totalCurrency: UInt64;
            };
            seed: import("o1js/dist/node/lib/field").Field;
            startCheckpoint: import("o1js/dist/node/lib/field").Field;
            lockCheckpoint: import("o1js/dist/node/lib/field").Field;
            epochLength: UInt32;
        };
    };
    sendTransaction(txn: Transaction): Promise<PendingTransaction>;
    transaction(sender: DeprecatedFeePayerSpec, f: () => void): Promise<Transaction>;
    applyJsonTransaction(json: string): void;
    fetchEvents(publicKey: PublicKey, tokenId?: Field): Promise<any>;
    fetchActions(publicKey: PublicKey, actionStates?: ActionStates, tokenId?: Field): Promise<{
        hash: string;
        actions: string[][];
    }[]>;
    getActions(publicKey: PublicKey, actionStates?: ActionStates, tokenId?: Field): {
        hash: string;
        actions: string[][];
    }[];
    addAccount: (publicKey: PublicKey, balance: string) => void;
    /**
     * An array of 10 test accounts that have been pre-filled with
     * 30000000000 units of currency.
     */
    testAccounts: {
        publicKey: PublicKey;
        privateKey: PrivateKey;
    }[];
    setGlobalSlot(slot: UInt32 | number): void;
    incrementGlobalSlot(increment: UInt32 | number): void;
    setBlockchainLength(height: UInt32): void;
    setTotalCurrency(currency: UInt64): void;
    setProofsEnabled(newProofsEnabled: boolean): void;
};
