import { Types } from 'o1js/dist/node/bindings/mina-transaction/types';
import { Field } from 'o1js/dist/node/lib/core';
import { PublicKey } from 'o1js/dist/node/lib/signature';
import { FetchedAccount } from 'o1js/dist/node/lib/mina/graphql';
export { Account, PartialAccount };
export { newAccount, parseFetchedAccount, fillPartialAccount };
type Account = Types.Account;
declare const Account: {
    sizeInFields(): number;
    toFields(value: Types.Account): import("o1js/dist/node/lib/field").Field[];
    toAuxiliary(value?: Types.Account | undefined): any[];
    fromFields(fields: import("o1js/dist/node/lib/field").Field[], aux: any[]): Types.Account;
    toJSON(value: Types.Account): Types.Json.Account;
    fromJSON(json: Types.Json.Account): Types.Account;
    check(value: Types.Account): void;
    toInput(value: Types.Account): {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    empty(): Types.Account;
};
declare function newAccount(accountId: {
    publicKey: PublicKey;
    tokenId?: Field;
}): Account;
type PartialAccount = Omit<Partial<Account>, 'zkapp'> & {
    zkapp?: Partial<Account['zkapp']>;
};
declare function parseFetchedAccount({ account }: FetchedAccount): Account;
declare function fillPartialAccount(account: PartialAccount): Account;
