import { GenericHashInput, GenericProvableExtended, GenericSignable } from 'o1js/dist/node/bindings/lib/generic';
import { BinableWithBits } from 'o1js/dist/node/bindings/lib/binable';
export { signable, ProvableExtended, ProvableBigint, BinableBigint, HashInput, Signable, };
type Field = bigint;
declare let signable: import("o1js/dist/node/bindings/lib/provable-generic").SignableConstructor<bigint>;
type Signable<T, J> = GenericSignable<T, J, Field>;
type ProvableExtended<T, J> = GenericProvableExtended<T, J, Field>;
type HashInput = GenericHashInput<Field>;
declare function ProvableBigint<T extends bigint = bigint, TJSON extends string = string>(check: (x: bigint) => void): Signable<T, TJSON>;
declare function BinableBigint<T extends bigint = bigint>(sizeInBits: number, check: (x: bigint) => void): BinableWithBits<T>;
